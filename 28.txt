// 备忘录，自顶向下
#include<stdio.h>

long long Knap(int,int,long long **);

int main()
{
    int N;
    while(~scanf("%d",&N))
    {
        if((1+N)*N % 4 != 0)
        {
            printf("0\n");
            continue;
        }
        int half = (1+N)*N/4;
        long long ** arr = new long long *[N+1];
        for(int i=1; i<=N; i++)
            arr[i] = new long long [half+1];
        for(int i=2; i<=N; i++)
            for(int j=1; j<=half; j++)
                arr[i][j] = -1;
        // 初始最下面
        for(int i=1; i<=half; i++)
            arr[1][i] = 0;
        arr[1][1] = 1;
        printf("%lld\n",Knap(N,half,arr)/2);
    }
    return 0;
}

long long  Knap(int i,int j, long long ** arr)
{
    if(arr[i][j] != -1)
        return arr[i][j];
    if(i > j)
        arr[i][j] = Knap(i-1,j,arr);
    else if(i == j)
        arr[i][j] = Knap(i-1,j,arr) + 1;
    else arr[i][j] = Knap(i-1,j,arr) + Knap(i-1,j-i,arr);
    return arr[i][j];
}

#################################################################
// 自底向上
#include<stdio.h>

long long Knap(int,int,long long **);

int main()
{
    int N;
    while(~scanf("%d",&N))
    {
        if((1+N)*N % 4 != 0)
        {
            printf("0\n");
            continue;
        }
        int half = (1+N)*N/4;
        long long ** arr = new long long *[N+1];
        for(int i=1; i<=N; i++)
            arr[i] = new long long [half+1];
        // 初始最下面
        for(int j=2; j<=half; j++)
            arr[1][j] = 0;
        arr[1][1] = 1;
        printf("%lld\n",Knap(N,half,arr)/2);
    }
    return 0;
}

long long Knap(int n,int m, long long ** arr) {
    for(int i=2;i<=n;i++) {
        for(int j=1;j<=m;j++) {
            if(i > j) arr[i][j] = arr[i-1][j];
            else if(i == j) arr[i][j] = arr[i-1][j] + 1;
            else arr[i][j] = arr[i-1][j] + arr[i-1][j-i];
        }
    }
    return arr[n][m];
}

